# script generated by newp, fire
cc = "gcc";

cflags = "-Iinclude";
cflagsdev = "-g -Wall -Wextra -fsanitize=address [cflags]";
cflagsrel = "-O3 [cflags]";

lflags = "";
lflagsdev = "-g -fsanitize=address [lflags]";
lflagsrel = "-O3 [lflags]";

srcs = "src/*.c";
devobjs = srcs: "src/*.c" -> "build/dev/*.o";
relobjs = srcs: "src/*.c" -> "build/rel/*.o";

headers = "include/*.h";

dev_exec = "servc";
rel_exec = "build/rel/servc";

"dev" {
    depends = "mkdirs", "build_devobjs";
    run = "[cc] [lflagsdev] -o [dev_exec] [devobjs]";
}

# abstraction for building objs so we build parallel and go brrrrr
"build_devobjs" {
    depends = "mkdirs", "srcs", "headers", devobjs;
    depends_parallel = true;
}

"rel" {
    depends = "mkdirs", "build_relobjs";
    run = "[cc] [lflagsrel] -o [rel_exec] [relobjs]";
}

"build_relobjs" {
    depends = "mkdirs", "srcs", "headers", relobjs;
    depends_parallel = true;
}


devobjs as obj {
    obj_src = obj: "build/dev/*.o" -> "src/*.c";
    run = "[cc] [cflagsdev] -c [obj_src] -o [obj]";
}

relobjs as obj {
    obj_src = obj: "build/rel/*.o" -> "src/*.c";
    run = "[cc] [cflagsrel] -c [obj_src] -o [obj]";
}

# utility tasks

"mkdirs" {
    run = "mkdir -p build/dev build/rel";
}

"clean" {
    run = "rm -rf build";
}
